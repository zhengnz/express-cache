// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, Redis, create_redis;

  Redis = require('ioredis');

  Promise = require('bluebird');

  create_redis = function(redisConf, redisDB) {
    var ip, port, redis, ref;
    if (redisDB == null) {
      redisDB = 0;
    }
    if (typeof redisConf === 'string') {
      ref = redisConf.split(':'), ip = ref[0], port = ref[1];
      return redis = new Redis({
        port: port,
        host: ip,
        db: redisDB
      });
    } else {
      return redis = new Redis.Cluster(redisConf, {
        redisOptions: {
          db: redisDB
        }
      });
    }
  };

  module.exports = function(opts, redis, prefix) {
    if (redis == null) {
      redis = null;
    }
    if (prefix == null) {
      prefix = '';
    }
    if (opts != null) {
      redis = create_redis(opts.conf, opts.db);
    }
    return function() {
      return {
        set: function(key, value, expired) {
          key = "" + prefix + key;
          value = JSON.stringify({
            data: value
          });
          if (expired != null) {
            return redis.set(key, value, 'PX', expired);
          } else {
            return redis.set(key, value);
          }
        },
        get: function(key) {
          key = "" + prefix + key;
          return redis.get(key).then(function(data) {
            if (data != null) {
              data = JSON.parse(data);
              return Promise.resolve(data.data);
            } else {
              return Promise.resolve(null);
            }
          });
        }
      };
    };
  };

}).call(this);

//# sourceMappingURL=RedisCache.js.map
