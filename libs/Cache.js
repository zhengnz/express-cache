// Generated by CoffeeScript 1.10.0
(function() {
  var Cache, Promise, _;

  _ = require('lodash');

  Promise = require('bluebird');

  Cache = (function() {
    function Cache(opts, debug, sync_key) {
      this.debug = debug != null ? debug : false;
      this.sync_key = sync_key != null ? sync_key : '_cacheSync';
      this.opts = _.assign({
        duplicate: false,
        expired: null
      }, opts);
      this.cache = null;
    }

    Cache.prototype.log = function(msg) {
      if (this.debug === true) {
        return console.log(msg);
      }
    };

    Cache.prototype.use = function(plane) {
      return this.cache = plane();
    };

    Cache.prototype.set = function(name, opts, alias) {
      var self;
      if (opts == null) {
        opts = {};
      }
      if (alias == null) {
        alias = null;
      }
      self = this;
      return function(req, res, next) {
        var _cache, cache, sync;
        if (!_.has(self.cache, 'set') || !_.has(self.cache, 'get')) {
          next(new Error('Please set cache plane'));
          return;
        }
        if (!_.has(req, 'cache')) {
          req.cache = {};
        }
        cache = req.cache;
        if (_.has(cache, 'get_or_create')) {
          next(new Error('You have to set alias of every cache when use multiple cache in one route'));
          return;
        }
        sync = _.has(req.query, self.sync_key);
        if (_.isFunction(name)) {
          _cache = function(obj) {
            return self._make(Promise.resolve(name(obj)), opts, sync);
          };
        } else {
          _cache = self._make(Promise.resolve(name), opts, sync);
        }
        if (alias != null) {
          cache[alias] = _cache;
        } else {
          cache = _cache;
        }
        req.cache = cache;
        return next();
      };
    };

    Cache.prototype._make = function(get_name, opts, sync) {
      var self;
      self = this;
      return {
        get_or_create: function(func) {
          return get_name.then(function(name) {
            opts = _.assign(self.opts, opts);
            if (sync === true) {
              self.log(name + " force sync");
              return self._getData(name, func, opts, sync);
            } else {
              self.log(name + " get from cache");
              return self.cache.get(name).then(function(data) {
                if (data != null) {
                  self.log(name + " cache hit");
                  return Promise.resolve(data);
                } else {
                  self.log(name + " cache miss");
                  return self._getData(name, func, opts, sync);
                }
              });
            }
          });
        }
      };
    };

    Cache.prototype._getData = function(name, func, opts, sync) {
      var self;
      self = this;
      return func(function(err) {
        if (opts.duplicate === true && sync === false) {
          self.log(name + " get from duplicate");
          return self.cache.get(name + "-duplicate").then(function(data) {
            if (data != null) {
              self.log(name + " duplicate hit");
              return Promise.resolve(data);
            } else {
              self.log(name + " duplicate miss");
              return Promise.reject(err);
            }
          })["catch"](function(_err) {
            return Promise.reject(_err);
          });
        } else {
          return Promise.reject(err);
        }
      }, function(data) {
        var arr;
        arr = [self.cache.set(name, data, opts.expired)];
        if (opts.duplicate === true) {
          self.log(name + " create duplicate");
          arr.push(self.cache.set(name + "-duplicate", data, null));
        }
        return Promise.all(arr).then(function() {
          return Promise.resolve(data);
        });
      });
    };

    return Cache;

  })();

  module.exports = Cache;

}).call(this);

//# sourceMappingURL=Cache.js.map
